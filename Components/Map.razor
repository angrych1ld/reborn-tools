@using System.Globalization;

<div class="map-holder">
    <div class="map-wrapper" draggable="false" @ref="wrapperRef">
        <div class="map-container" style="@MapContainerStyle">
            <img class="map-image" src="Maps/world-map-big.png" />
        </div>
        <div class="interaction-region"
             @ontouchstart="TouchDown"
             @onpointerdown="MouseDown">
        </div>
    </div>
</div>

@code {
    [Parameter] public bool AllowMove { get; set; } = true;

    private const double fullMapPixelSizeX = 1812d;
    private const double fullMapPixelSizeY = 2620d;
    private const double mapAspect = fullMapPixelSizeY / fullMapPixelSizeX;
    private const float containerSizeAnimationSpeed = 300f;
    private const float containerPositionAnimationSpeed = 800f;

    private (double x, double y) mapContainerSize = (1812, 2620);
    private (double x, double y) mapContainerPosition = (0, 0);

    private (int x, int y) mapSize = (1, 1);

    private bool isDragging = false;

    private ElementReference wrapperRef;

    private string MapContainerStyle
    {
        get
        {
            CultureInfo usCulture = CultureInfo.GetCultureInfo("en-us");
            return $"top: {mapContainerPosition.y.ToString(usCulture)}px; " +
                    $"left: {mapContainerPosition.x.ToString(usCulture)}px; " +
                    $"width: {mapContainerSize.x.ToString(usCulture)}px; " +
                    $"height:{mapContainerSize.y.ToString(usCulture)}px";
        }
    }

    protected override Task OnInitializedAsync()
    {
        App.OnPointerMove += PointerMove;
        App.OnPointerUp += PointerUp;
        App.AnimationUpdate += Update;
        App.OnWindowSizeChange += () => UpdateMapSize().ConfigureAwait(false);

        return base.OnInitializedAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            UpdateMapSize().ConfigureAwait(false);
        }

        base.OnAfterRender(firstRender);
    }

    private async Task UpdateMapSize()
    {
        BoundingClientRect rect = await App.Instance.GetBoundingRect(wrapperRef);

        // Clamp it to 1 to make sure it's above 0
        mapSize = (Math.Max(1, (int)rect.Width), (int)Math.Max(1, rect.Height));

        ClampContainerPosition();
        StateHasChanged();
    }

    private void Update(float deltaTime)
    {
    }

    private double MoveTowards(double original, double target, double maxDelta)
    {
        if (original < target)
        {
            original += maxDelta;
            if (original > target) original = target;
        }
        if (original > target)
        {
            original -= maxDelta;
            if (original < target) original = target;
        }
        return original;
    }

    private void MouseDown(MouseEventArgs args)
    {
        isDragging = true;
    }

    private void TouchDown(TouchEventArgs args)
    {
        isDragging = true;
    }

    private void PointerMove((double x, double y) delta)
    {
        if (!isDragging || !AllowMove) return;

        mapContainerPosition.x += delta.x;
        mapContainerPosition.y += delta.y;

        ClampContainerPosition();

        StateHasChanged();
    }

    public void SetZoomPixelHeight(double pixelHeight)
    {
        var oldSize = mapContainerSize;

        mapContainerSize = (pixelHeight / mapAspect, pixelHeight);

        //mapContainerPosition.x = (mapContainerPosition.x - oldSize.x * 0.5f) / (-mapContainerSize.x / oldSize.x) + mapContainerSize.x * 0.5f;
        //mapContainerPosition.y = (mapContainerPosition.y - oldSize.y * 0.5f) / (-mapContainerSize.y / oldSize.y) + mapContainerSize.y * 0.5f;

        //mapContainerPosition.x = (mapContainerPosition.x) * (mapContainerSize.x / oldSize.x);
        //mapContainerPosition.y = (mapContainerPosition.y) * (mapContainerSize.y / oldSize.y);

        mapContainerPosition.x = -((-mapContainerPosition.x + mapSize.x * 0.5) * (mapContainerSize.x / oldSize.x) - mapSize.x * 0.5f);
        mapContainerPosition.y = -((-mapContainerPosition.y + mapSize.y * 0.5) * (mapContainerSize.y / oldSize.y) - mapSize.y * 0.5f);

        //-newOffset = (-offset + mapSize * 0.5) * (newMapSize / mapSize) - newMapSize * 0.5f

        //-newConPos = (-conPos + mapSize) * (newConSize / conSize) - mapSize
        ClampContainerPosition();
        StateHasChanged();



        //targetMapContainerSize = (pixelHeight / mapAspect, pixelHeight);
        //targetMapContainerPosition.x += (mapSize.x / 2 - mapContainerPosition.x) * ((targetMapContainerSize.x / mapContainerSize.x) - 1);
        //targetMapContainerPosition.y += (mapSize.x / 2 - mapContainerPosition.x) * ((targetMapContainerSize.x / mapContainerSize.x) - 1);
    }

    public void SetZoomPercentValue(double percent)
    {
        percent = Math.Clamp(Math.Pow(percent, 2) * 99 + 1, 1, 10);

        double targetPixelHeight = 0;

        // Figure out if height or width should decide the scale
        if (mapSize.x * mapAspect > mapSize.y)
        {
            targetPixelHeight = mapSize.x * percent * mapAspect;
        }
        else
        {
            targetPixelHeight = mapSize.y * percent;
        }

        SetZoomPixelHeight(targetPixelHeight);
    }

    private void ClampContainerPosition()
    {
        // Make sure container is not larger than wrapper
        double missingX = mapSize.x - mapContainerSize.x;
        double missingY = (mapSize.y - mapContainerSize.y) / mapAspect;

        double missing = Math.Max(missingX, missingY);
        if (missing > 0)
        {
            missing += 0.00001f;
            mapContainerSize.x += missing;
            mapContainerSize.y += missing * mapAspect;
        }

        // Make sure map is not out of bounds
        mapContainerPosition.x = Math.Clamp(mapContainerPosition.x, -mapContainerSize.x + mapSize.x, 0);
        mapContainerPosition.y = Math.Clamp(mapContainerPosition.y, -mapContainerSize.y + mapSize.y, 0);
    }

    private void PointerUp()
    {
        isDragging = false;
    }
}
