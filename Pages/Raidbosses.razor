@page "/raidbosses"

@inject HttpClient Http
@inject IMatToaster Toaster

<MatH3>Raidboss List</MatH3>
<p>For Level 20-40 spawn status is given, may be up to 10 minutes old</p>

<MatIconButton Icon="refresh" @onclick="Reload" Style="margin-bottom: 0.5rem"></MatIconButton>

@if (rbData == null)
{
    if (!loadingError)
    {
        <MatProgressBar Indeterminate="true"></MatProgressBar>
    }
}
else
{
    <br />
    <MatTable Items="@rbData" Striped="true" FilterByColumnName="Title" DebounceMilliseconds="150" Class="mat-elevation-z5" 
              ShowPaging="false" UseSortHeaderRow="true" PageSize="1000">
        <MatTableHeader>
            <MatSortHeaderRow SortChanged="@SortDataChanged">
                <MatSortHeader SortId="name" Style="min-width: 20rem">Name</MatSortHeader>
                <MatSortHeader SortId="level">Level</MatSortHeader>
                <MatSortHeader SortId="status">Status</MatSortHeader>
                <th>Summary(L2Reborn)</th>
            </MatSortHeaderRow>
        </MatTableHeader>
        <MatTableRow>
            <td><Tooltip TooltipType="TooltipType.Raidboss" Data="@context"><a>@context.Title</a></Tooltip></td>
            <td class="text-center">@context.Level</td>
            <td class="@(context.Alive == null ? "table-secondary" : (context.Alive.Value ? "table-success" : "table-danger")) text-center">
                @(context.Alive == null ? "Unknown" : (context.Alive.Value ? "Alive" : "Dead"))
            </td>
            <td>
                <MatButtonLink Href="@context.RebornSummaryAddress" Target="_blank">
                    <MatIcon Icon="link"></MatIcon>&nbsp; Summary
                </MatButtonLink>
            </td>
        </MatTableRow>
    </MatTable>
    <div class="very-useful-div" style="height: 20rem">

    </div>
}

@code {
    @code {
        private List<RaidBoss> rbData;
        private bool loadingError;

        string sortId;
        MatSortDirection sortDirection;


        protected override async Task OnInitializedAsync()
        {
            await Reload();
            SortDataChanged(null);
        }

        private async Task Reload()
        {
            rbData = null;
            loadingError = false;

            try
            {
                Task<List<RaidBoss>> rbTask = DataAccess.FetchRaidbosses(Http);
                Task<List<RaidBossStatus>> rbsTask = DataAccess.FetchRaidbossStatus(Http);
                Task<List<RaidbossLocation>> rblTask = DataAccess.FetchRaidbossLocations(Http);
                await Task.WhenAll(rbTask, rbsTask, rblTask);

                rbData = rbTask.Result.ToList();
                foreach (RaidBoss rb in rbData)
                {
                    RaidBossStatus st = rbsTask.Result.FirstOrDefault(s => s.ID == rb.ID);
                    RaidbossLocation loc = rblTask.Result.FirstOrDefault(l => l.RaidbossID == rb.ID);
                    if (st != null)
                    {
                        rb.Alive = st.Alive;
                    }
                    if (loc != null)
                    {
                        rb.CoordinateX = loc.CoorX;
                        rb.CoordinateY = loc.CoorY;
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                Toaster.Add("Something went wrong", MatToastType.Danger);
                loadingError = true;
            }

            SortData();
        }

        void SortDataChanged(MatSortChangedEvent sort)
        {
            sortId = sort?.SortId ?? "level";
            sortDirection = (sort == null ? MatSortDirection.Asc : sort.Direction);

            if (sortDirection == MatSortDirection.None)
            {
                sortId = "level";
                sortDirection = MatSortDirection.Asc;
            }

            SortData();
        }

        private void SortData()
        {
            if (rbData == null) return;

            if (sortDirection == MatSortDirection.Asc)
            {
                switch (sortId)
                {
                    case "name":
                        rbData.Sort((r1, r2) => string.Compare(r1.Title, r2.Title) * 10 + Math.Clamp(r1.Level.CompareTo(r2.Level), -1, 1));
                        break;
                    case "level":
                        rbData.Sort((r1, r2) => r1.Level.CompareTo(r2.Level));
                        break;
                    case "status":
                        rbData.Sort((r1, r2) => r1.AliveInt.CompareTo(r2.AliveInt) * 10 + Math.Clamp(r1.Level.CompareTo(r2.Level), -1, 1));
                        break;
                }
            }
            else
            {
                switch (sortId)
                {
                    case "name":
                        rbData.Sort((r1, r2) => string.Compare(r2.Title, r1.Title) * 10 + Math.Clamp(r1.Level.CompareTo(r2.Level), -1, 1));
                        break;
                    case "level":
                        rbData.Sort((r1, r2) => r2.Level.CompareTo(r1.Level));
                        break;
                    case "status":
                        rbData.Sort((r1, r2) => r2.AliveInt.CompareTo(r1.AliveInt) * 10 + Math.Clamp(r1.Level.CompareTo(r2.Level), -1, 1));
                        break;
                }
            }
        }
    }
}
